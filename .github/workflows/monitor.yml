name: Monitor festival (pipeline semplice)

on:
  workflow_dispatch: {}   # lo avvii a mano dal tab Actions

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 12

    steps:
      # 1) Prende il repo
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) Setup git per il push finale
      - name: Configura git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git fetch origin main
          git reset --hard origin/main

      # 3) Installa dipendenze Python minime
      - name: Installa dipendenze
        run: |
          python -m pip install --upgrade pip
          pip install requests pandas

      # 4) Scarica le pagine elencate in config/sources.txt con lo script Python
      - name: Scarica pagine dei festival (Python)
        run: |
          python3 scripts/archive_pages.py

      # 5) Rigenera il report (append analisi se lo script esiste)
      - name: Header report (ora di Roma)
        run: |
          mkdir -p reports
          {
            echo "# Report festival â€“ aggiornato $(TZ=Europe/Rome date +'%Y-%m-%d %H:%M %Z')"
            echo
          } > reports/ultimo_report.md

      - name: Aggiungi analisi dal CSV (se presente)
        run: |
          if [ -f scripts/generate_report.py ]; then
            python3 scripts/generate_report.py
          else
            echo "_Nessuna analisi: scripts/generate_report.py mancante_" >> reports/ultimo_report.md
          fi

      # 6) Commit e push forzato di report e raw
      - name: Commit e push
        run: |
          git add reports/ultimo_report.md data/raw data/records.csv || true
          git commit -m "crawl+report: aggiornamento" || echo "Niente da committare"
          git push origin HEAD:main --force
